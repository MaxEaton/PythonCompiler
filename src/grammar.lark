%import common.CNAME                      -> NAME
%import common.INT                        -> DECIMAL_INT
%import common.WS_INLINE
%ignore WS_INLINE
%declare _INDENT _DEDENT

NEWLINE: (/\n[\t ]*/)+
WHILE.1: "while"
IF.1: "if"
ELSE.1: "else"
AND.1: "and"
OR.1: "or"
NOT.1: "not"
IS.1: "is"
INT.1: "int"
EVAL.1: "eval"
INPUT.1: "input"
BREAK.1: "break"
TRUE.1: "True"
FALSE.1: "False"

start: module

module: stmt*

stmt: "print" "(" obj ")" NEWLINE         -> print_
    | expr NEWLINE
    | NAME "=" obj NEWLINE                -> assign_
    | subscription "=" obj NEWLINE        -> assign_
    | listionary "=" obj NEWLINE          -> assign_
    | BREAK NEWLINE
    | if_block
    | while_block
    | NEWLINE                             -> empty

expr: obj

subscription: term "[" obj "]"

obj: ternary

big: dictionary
   | listionary

dictionary: "{" dict_data "}"

dict_data:                                -> empty
         | obj ":" obj                    -> dict_datum
         | dict_data "," obj ":" obj

listionary: "[" list_data "]"

list_data:                                -> empty
         | obj                            -> list_datum
         | list_data "," obj

ternary: or_expr IF or_expr ELSE obj      -> ternary_
       | or_expr

or_expr: or_expr OR and_expr              -> or_
       | and_expr

and_expr: and_expr AND comp_expr          -> and_
        | comp_expr

comp_expr: comp_expr comp_op not_expr     -> comp_
         | not_expr

not_expr: NOT not_expr                    -> not_
        | add_expr

add_expr: add_expr "+" neg_expr           -> add_
        | neg_expr

neg_expr: "-" neg_expr                    -> neg_
        | term

term: "(" obj ")"     
    | DECIMAL_INT          
    | NAME          
    | EVAL "(" INPUT "(" ")" ")"          -> evalinput_
    | INT "(" obj ")"                     -> int_
    | TRUE                                -> true_
    | FALSE                               -> false_
    | subscription
    | big

comp_op: "=="                             -> eq_
       | "!="                             -> ne_
       | IS                               -> is_

suite: _INDENT stmt+ _DEDENT

if_block: IF obj ":" NEWLINE suite [ELSE ":" NEWLINE suite]

while_block: WHILE obj ":" NEWLINE suite [ELSE ":" NEWLINE suite]
